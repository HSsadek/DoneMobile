  return (
    <SafeAreaView style={[styles.safeArea, { backgroundColor: theme.colors.background }]}>
      <StatusBar style={theme.dark ? 'light' : 'dark'} />
      <ScrollView style={styles.container}>
        <View style={[styles.header, { borderBottomColor: theme.colors.outline }]}>
          <TouchableOpacity 
            style={styles.backButton}
            onPress={() => navigation.goBack()}
          >
            <Ionicons name="arrow-back" size={24} color={theme.colors.onBackground} />
          </TouchableOpacity>
          <Text style={[styles.headerTitle, { color: theme.colors.onBackground }]}>Yeni Proje</Text>
        </View>

        <View style={styles.content}>
          {/* Proje Bilgileri */}
          <View style={styles.section}>
            <Text style={[styles.sectionTitle, { color: theme.colors.onBackground }]}>Proje Bilgileri</Text>
            
            <View style={styles.inputContainer}>
              <Text style={[styles.label, { color: theme.colors.onSurfaceVariant }]}>Proje Başlığı *</Text>
              <TextInput 
                mode="outlined"
                placeholder="Projenin başlığını girin"
                value={title}
                onChangeText={setTitle}
                style={styles.input}
              />
            </View>
            
            <View style={styles.inputContainer}>
              <Text style={[styles.label, { color: theme.colors.onSurfaceVariant }]}>Açıklama</Text>
              <TextInput 
                mode="outlined"
                placeholder="Proje hakkında kısa açıklama yazın"
                value={description}
                onChangeText={setDescription}
                multiline
                numberOfLines={4}
                style={[styles.input, styles.textArea]}
              />
            </View>
            
            <View style={styles.dateContainer}>
              <View style={styles.dateInputContainer}>
                <Text style={[styles.label, { color: theme.colors.onSurfaceVariant }]}>Başlangıç Tarihi</Text>
                <TouchableOpacity 
                  style={[styles.dateButton, { borderColor: theme.colors.outline }]}
                  onPress={() => setShowStartDatePicker(true)}
                >
                  <Text style={[styles.dateButtonText, { color: theme.colors.onBackground }]}>
                    {format(startDate, 'dd MMM yyyy', { locale: tr })}
                  </Text>
                  <Ionicons name="calendar-outline" size={20} color={theme.colors.onSurfaceVariant} />
                </TouchableOpacity>
                {showStartDatePicker && (
                  <DateTimePicker
                    value={startDate}
                    mode="date"
                    display={Platform.OS === 'ios' ? 'spinner' : 'default'}
                    onChange={handleStartDateChange}
                  />
                )}
              </View>
              
              <View style={styles.dateInputContainer}>
                <Text style={[styles.label, { color: theme.colors.onSurfaceVariant }]}>Bitiş Tarihi</Text>
                <TouchableOpacity 
                  style={[styles.dateButton, { borderColor: theme.colors.outline }]}
                  onPress={() => setShowEndDatePicker(true)}
                >
                  <Text style={[styles.dateButtonText, { color: theme.colors.onBackground }]}>
                    {format(endDate, 'dd MMM yyyy', { locale: tr })}
                  </Text>
                  <Ionicons name="calendar-outline" size={20} color={theme.colors.onSurfaceVariant} />
                </TouchableOpacity>
                {showEndDatePicker && (
                  <DateTimePicker
                    value={endDate}
                    mode="date"
                    display={Platform.OS === 'ios' ? 'spinner' : 'default'}
                    onChange={handleEndDateChange}
                    minimumDate={startDate}
                  />
                )}
              </View>
            </View>
          </View>
          
          {/* Ekip Üyeleri */}
          <View style={styles.section}>
            <View style={styles.sectionTitleRow}>
              <Text style={[styles.sectionTitle, { color: theme.colors.onBackground }]}>Ekip Üyeleri</Text>
              <TouchableOpacity onPress={() => setShowSampleMembers(!showSampleMembers)}>
                <Text style={{ color: theme.colors.primary }}>
                  {showSampleMembers ? 'Önerileri Gizle' : 'Öneriler'}
                </Text>
              </TouchableOpacity>
            </View>
            
            {showSampleMembers && (
              <View style={styles.suggestionsContainer}>
                <Text style={[styles.subsectionTitle, { color: theme.colors.onSurfaceVariant }]}>
                  Hızlı Başlangıç: Örnek Üyeler
                </Text>
                <Button 
                  mode="contained-tonal" 
                  onPress={addSampleMembers}
                  style={{ marginTop: 8 }}
                >
                  Örnek Üyeleri Ekle
                </Button>
              </View>
            )}
            
            <View style={styles.inputRow}>
              <TextInput 
                mode="outlined"
                placeholder="Üye adı"
                value={newMemberName}
                onChangeText={handleNameChange}
                style={[styles.input, { flex: 2, marginRight: 8 }]}
              />
              <TextInput 
                mode="outlined"
                placeholder="Rolü"
                value={newMemberRole}
                onChangeText={handleRoleChange}
                style={[styles.input, { flex: 1 }]}
              />
              <IconButton
                icon="plus"
                mode="contained-tonal"
                size={24}
                onPress={handleAddMember}
                style={{ marginLeft: 8 }}
              />
            </View>
            
            {members.length > 0 ? (
              <View style={styles.membersList}>
                {members.map((member) => (
                  <MemberCard 
                    key={member.id} 
                    member={member} 
                    tasks={tasks.filter(task => task.assignee === member.id)} 
                    onRemove={handleRemoveMember}
                  />
                ))}
              </View>
            ) : (
              <View style={styles.emptyState}>
                <Text style={[styles.emptyText, { color: theme.colors.onSurfaceVariant }]}>
                  Henüz ekip üyesi eklenmedi
                </Text>
              </View>
            )}
          </View>
          
          {/* Görevler */}
          <View style={styles.section}>
            <View style={styles.sectionTitleRow}>
              <Text style={[styles.sectionTitle, { color: theme.colors.onBackground }]}>Görevler</Text>
              <TouchableOpacity onPress={() => setShowSampleTasks(!showSampleTasks)}>
                <Text style={{ color: theme.colors.primary }}>
                  {showSampleTasks ? 'Önerileri Gizle' : 'Öneriler'}
                </Text>
              </TouchableOpacity>
            </View>
            
            {showSampleTasks && (
              <View style={styles.suggestionsContainer}>
                <Text style={[styles.subsectionTitle, { color: theme.colors.onSurfaceVariant }]}>
                  Hızlı Başlangıç: Örnek Görevler
                </Text>
                <Button 
                  mode="contained-tonal" 
                  onPress={addSampleTasks}
                  style={{ marginTop: 8 }}
                >
                  Örnek Görevleri Ekle
                </Button>
              </View>
            )}
            
            <View style={styles.inputContainer}>
              <Text style={[styles.label, { color: theme.colors.onSurfaceVariant }]}>Görev Başlığı</Text>
              <TextInput 
                mode="outlined"
                placeholder="Görev başlığını girin"
                value={taskTitle}
                onChangeText={handleTaskTitleChange}
                style={styles.input}
              />
            </View>
            
            <View style={styles.dateContainer}>
              <View style={styles.dateInputContainer}>
                <Text style={[styles.label, { color: theme.colors.onSurfaceVariant }]}>Başlangıç</Text>
                <TouchableOpacity 
                  style={[styles.dateButton, { borderColor: theme.colors.outline }]}
                  onPress={() => setShowTaskStartDatePicker(true)}
                >
                  <Text style={[styles.dateButtonText, { color: theme.colors.onBackground }]}>
                    {format(taskStartDate, 'dd MMM yyyy', { locale: tr })}
                  </Text>
                  <Ionicons name="calendar-outline" size={20} color={theme.colors.onSurfaceVariant} />
                </TouchableOpacity>
                {showTaskStartDatePicker && (
                  <DateTimePicker
                    value={taskStartDate}
                    mode="date"
                    display={Platform.OS === 'ios' ? 'spinner' : 'default'}
                    onChange={handleTaskStartDateChange}
                    minimumDate={startDate}
                    maximumDate={endDate}
                  />
                )}
              </View>
              
              <View style={styles.dateInputContainer}>
                <Text style={[styles.label, { color: theme.colors.onSurfaceVariant }]}>Bitiş</Text>
                <TouchableOpacity 
                  style={[styles.dateButton, { borderColor: theme.colors.outline }]}
                  onPress={() => setShowTaskDueDatePicker(true)}
                >
                  <Text style={[styles.dateButtonText, { color: theme.colors.onBackground }]}>
                    {format(taskDueDate, 'dd MMM yyyy', { locale: tr })}
                  </Text>
                  <Ionicons name="calendar-outline" size={20} color={theme.colors.onSurfaceVariant} />
                </TouchableOpacity>
                {showTaskDueDatePicker && (
                  <DateTimePicker
                    value={taskDueDate}
                    mode="date"
                    display={Platform.OS === 'ios' ? 'spinner' : 'default'}
                    onChange={handleTaskDueDateChange}
                    minimumDate={taskStartDate}
                    maximumDate={endDate}
                  />
                )}
              </View>
              
              <IconButton
                icon="plus"
                mode="contained-tonal"
                size={24}
                onPress={handleAddTask}
                style={{ alignSelf: 'flex-end', marginBottom: 12 }}
              />
            </View>
            
            {tasks.length > 0 ? (
              <View style={styles.tasksList}>
                {tasks.map((task, index) => (
                  <View key={task.id} style={[styles.taskCard, { borderColor: theme.colors.outline }]}>
                    <View style={styles.taskInfo}>
                      <View style={styles.taskDetails}>
                        <Text style={[styles.taskTitle, { color: theme.colors.onBackground }]}>
                          {task.title}
                        </Text>
                        <Text style={[styles.taskDueDate, { color: theme.colors.primary }]}>
                          {format(task.dueDate, 'dd MMM yyyy', { locale: tr })}
                        </Text>
                      </View>
                      <TouchableOpacity
                        style={styles.removeTaskButton}
                        onPress={() => handleRemoveTask(task.id)}
                      >
                        <Ionicons name="close-circle-outline" size={24} color="#FF3B30" />
                      </TouchableOpacity>
                    </View>
                    
                    <View style={{ marginTop: 8 }}>
                      <Text style={[styles.label, { color: theme.colors.onSurfaceVariant, marginBottom: 4 }]}>
                        Görev {task.assignee ? 'atandı' : 'atanmadı'}
                      </Text>
                      
                      <ScrollView horizontal showsHorizontalScrollIndicator={false}>
                        <View style={styles.memberSelectContainer}>
                          {members.map((member) => (
                            <TouchableOpacity
                              key={member.id}
                              style={[
                                styles.memberSelectButton,
                                task.assignee === member.id && styles.memberSelectButtonActive
                              ]}
                              onPress={() => handleAssignTask(task.id, member.id)}
                            >
                              <Text style={[
                                styles.memberSelectButtonText,
                                task.assignee === member.id && styles.memberSelectButtonTextActive
                              ]}>
                                {member.name}
                              </Text>
                            </TouchableOpacity>
                          ))}
                        </View>
                      </ScrollView>
                    </View>
                  </View>
                ))}
              </View>
            ) : (
              <View style={styles.emptyState}>
                <Text style={[styles.emptyText, { color: theme.colors.onSurfaceVariant }]}>
                  Henüz görev eklenmedi
                </Text>
              </View>
            )}
          </View>
          
          {/* Eylemler */}
          <View style={[styles.actions, { paddingBottom: insets.bottom }]}>
            <Button
              mode="outlined"
              onPress={() => navigation.goBack()}
              style={[styles.actionButton, { borderColor: theme.colors.outline }]}
              contentStyle={styles.actionButtonContent}
            >
              İptal
            </Button>
            
            <Button
              mode="contained"
              onPress={handleCreate}
              style={[styles.actionButton, { backgroundColor: theme.colors.primary }]}
              contentStyle={styles.actionButtonContent}
              disabled={!title.trim()}
            >
              Oluştur
            </Button>
          </View>
        </View>
      </ScrollView>
      
      {/* Üye silme onayı */}
      <Portal>
        <Modal
          visible={showDeleteMemberConfirm}
          onDismiss={cancelDeleteMember}
          contentContainerStyle={[
            styles.alertContent, 
            { backgroundColor: theme.colors.background }
          ]}
          style={styles.alertModal}
        >
          <Text style={[styles.alertTitle, { color: theme.colors.onBackground }]}>
            Üye Silinecek
          </Text>
          <Text style={[styles.alertMessage, { color: theme.colors.onSurfaceVariant }]}>
            Bu üyeyi ekipten silmek istediğinize emin misiniz? Bu üyeye atanmış görevler de güncellenecektir.
          </Text>
          <View style={styles.alertActions}>
            <Button
              mode="text"
              onPress={cancelDeleteMember}
              textColor={theme.colors.secondary}
            >
              İptal
            </Button>
            <Button
              mode="contained"
              onPress={confirmDeleteMember}
              buttonColor="#FF3B30"
            >
              Sil
            </Button>
          </View>
        </Modal>
      </Portal>
    </SafeAreaView>
  );
};

const createStyles = (theme: any) => StyleSheet.create({
  safeArea: {
    flex: 1,
  },
  container: {
    flex: 1,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 16,
    borderBottomWidth: 1,
  },
  backButton: {
    marginRight: 16,
    padding: 4,
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: '600',
  },
  content: {
    padding: 16,
  },
  section: {
    marginBottom: 24,
  },
  sectionTitleRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
    marginBottom: 16,
  },
  subsectionTitle: {
    fontSize: 14,
    fontWeight: '500',
  },
  suggestionsContainer: {
    marginBottom: 16,
    padding: 12,
    backgroundColor: theme.colors.primaryContainer,
    borderRadius: 8,
  },
  inputRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 16,
  },
  membersList: {
    gap: 12,
  },
  memberCard: {
    backgroundColor: theme.colors.elevation.level1,
    borderRadius: 12,
    padding: 16,
    borderWidth: 1,
    borderColor: theme.colors.outline,
  },
  memberInfo: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  memberAvatar: {
    width: 40,
    height: 40,
    borderRadius: 20,
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 12,
  },
  memberInitials: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
  memberDetails: {
    flex: 1,
  },
  memberName: {
    fontSize: 16,
    fontWeight: '600',
    color: theme.colors.onBackground,
  },
  memberRole: {
    fontSize: 14,
    color: theme.colors.onSurfaceVariant,
    marginTop: 2,
  },
  memberDepartment: {
    fontSize: 12,
    color: theme.colors.primary,
    marginTop: 2,
    fontWeight: '500',
  },
  removeMemberButton: {
    padding: 4,
  },
  memberTasks: {
    marginTop: 8,
  },
  memberTask: {
    flexDirection: 'row',
    alignItems: 'center',
    marginTop: 6,
  },
  memberTaskText: {
    fontSize: 14,
    color: theme.colors.onSurfaceVariant,
    marginLeft: 6,
  },
  inputContainer: {
    marginBottom: 20,
  },
  label: {
    fontSize: 14,
    color: theme.colors.onSurfaceVariant,
    marginBottom: 8,
  },
  input: {
    backgroundColor: theme.colors.elevation.level1,
  },
  textArea: {
    height: 100,
    textAlignVertical: 'top',
  },
  dateContainer: {
    flexDirection: 'row',
    gap: 12,
  },
  dateInputContainer: {
    flex: 1,
  },
  dateButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    backgroundColor: theme.colors.elevation.level1,
    padding: 12,
    borderRadius: 8,
    borderWidth: 1,
  },
  dateButtonText: {
    fontSize: 16,
    marginRight: 4,
  },
  tasksList: {
    gap: 12,
  },
  taskCard: {
    backgroundColor: theme.colors.elevation.level1,
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    borderWidth: 1,
  },
  taskInfo: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  taskDetails: {
    flex: 1,
  },
  taskTitle: {
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 4,
  },
  taskAssignee: {
    fontSize: 14,
    color: theme.colors.onSurfaceVariant,
    marginBottom: 2,
  },
  taskDueDate: {
    fontSize: 12,
  },
  removeTaskButton: {
    padding: 4,
  },
  memberSelectContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
  },
  memberSelectButton: {
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 16,
    backgroundColor: theme.colors.elevation.level1,
    borderWidth: 1,
    borderColor: theme.colors.outline,
  },
  memberSelectButtonActive: {
    backgroundColor: theme.colors.secondary,
    borderColor: theme.colors.secondary,
  },
  memberSelectButtonText: {
    fontSize: 14,
    color: theme.colors.onBackground,
  },
  memberSelectButtonTextActive: {
    color: theme.colors.onSecondary,
  },
  actions: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 24,
    gap: 12,
  },
  actionButton: {
    flex: 1,
  },
  actionButtonContent: {
    paddingVertical: 6,
  },
  emptyState: {
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 20,
  },
  emptyText: {
    fontSize: 14,
  },
  alertModal: {
    margin: 0,
    justifyContent: 'flex-end',
  },
  alertContent: {
    padding: 16,
    borderTopLeftRadius: 16,
    borderTopRightRadius: 16,
    maxHeight: '50%',
  },
  alertTitle: {
    fontSize: 18,
    fontWeight: '600',
    marginBottom: 16,
  },
  alertMessage: {
    fontSize: 16,
    marginBottom: 24,
  },
  alertActions: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    gap: 8,
  },
});

export default NewProjectScreen;
